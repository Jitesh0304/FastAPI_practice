from fastapi import FastAPI, Request
import time
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
from starlette.responses import Response

app = FastAPI()

"""
Create a middlewareÂ¶
To create a middleware you use the decorator @app.middleware("http") on top of a function.

The middleware function receives:

The request.
A function call_next that will receive the request as a parameter.
This function will pass the request to the corresponding path operation.
Then it returns the response generated by the corresponding path operation.
You can then modify further the response before returning it.

Keep in mind that custom proprietary headers can be added using the 'X-' prefix
"""


# middleware decorator
# @app.middleware('http')
async def add_process_time_header(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers['X-Process-Time'] = str(process_time)
    return response


# class base middleware
class CustomMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        start_time = time.time()
        response = await call_next(request)
        process_time = time.time() - start_time
        response.headers['X-class-middleware-time'] = str(process_time)
        return response


app.add_middleware(CustomMiddleware)
origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

origins = ["http://localhost:8000", "http://localhost:3000"]
app.add_middleware(CORSMiddleware, allow_origins=origins)


@app.get('/detail')
async def get_detail():
    return {'name': 'Lion'}
